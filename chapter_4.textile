h1. Chapter 4 - Red Green Refactor

h2. Model Specs

h3. Book

h4. app/models/book.rb

<pre>
<code class="ruby">
class Book
  include DataMapper::Resource

  property :id,               Serial
  property :isbn,             String,   :length => 13,  :nullable => false
  property :created_at,       DateTime,                 :nullable => false
  property :short_title,      String,   :length => 50
  property :long_title,       String,   :length => 200
  property :author,           String,   :length => 200
  property :publisher,        String,   :length => 200
  property :notes,            Text
  property :owner_id,         Integer


  is :permalink, :title, :length => 60


  belongs_to :owner, :class_name => "User"
  has n, :reservations


  validates_present :title, :owner


  def title
    @short_title.blank? ? @long_title : @short_title
  end
end
</code>
</pre>

h3. Association CheetSheet

|_.    |_\2.declared in|_\2.declared for|
|_.----|{background:#ddd}.association type|{background:#ddd}.multiplicity|{background:#ddd}.association type|{background:#ddd}.multiplicity|
|{background:#ddd}.belongs_to|child|1|parent|1 OR n|
|{background:#ddd}.has 1|parent|1|child|1|
|{background:#ddd}.has n|parent|1|child|n|
|{background:#ddd}.has n, :through => Resource|parent|n|parent|n|

h3. Book Specs

h4. spec/models/book_spec.rb

<pre>
<code clas="ruby">
require File.join( File.dirname(__FILE__), '..', "spec_helper" )

describe Book do

  before(:each) do
    DataMapper.auto_migrate!
  end

  describe "#title" do
    it "should not be blank unless both the short & long titles are blank" do
      book = Book.new(:short_title => "short", :long_title => "long")
      book.title.should_not be_blank

      book.short_title = book.long_title = ""
      book.title.should be_blank
    end

    it "should return the short title unless it's blank" do
      book = Book.new(:short_title => "short", :long_title => "long")
      book.title.should == book.short_title

      book.short_title = ""
      book.title.should_not == book.short_title
    end

    it "should return the long title only if the short title is blank" do
      book = Book.new(:long_title => "long")
      book.title.should == book.long_title

      book.short_title = "short"
      book.title.should_not == book.long_title
    end
  end

  describe "Validations" do
    it "should ensure the short_title or long_title is present through the title presence validation" do
      book = Book.new(:short_title => nil, :long_title => nil)

      book.should_not be_valid
      book.errors[:title].should_not be_nil
      book.errors[:title].should_not be_empty
    end
  end
end
</code>
</pre>

h3. Running the Model Specs

<pre>
<code class="sh">
  community_shelf $ rake spec:model
  (in /Users/ben/code/merb+datamapper/community_shelf)
  ....

  Finished in 0.111621 seconds

  4 examples, 0 failures
</code>
</pre>

h2. Controller Specs

h3. Books Controller

h4. app/controllers/books.rb

<pre>
<code class="ruby">
class Books < Application

  # ...and remember, everything returned from an action
  # goes to the client...
  def index
    render
  end

  def show(slug)
    @book = Book.first(:slug => slug) || raise(NotFound, :book_slug => slug)

    display @book
  end
end
</code>
</pre>

h4. Controller Tips

* <b>render</b> your content, <b>display</b> your resource(s)!
* everything returned from an action goes to the client.
* raise Exceptions for <b>non-200</b> responses.

h3. Books Specs

h4. spec/controllers/books.rb

<pre>
<code class="ruby">
require File.join(File.dirname(__FILE__), '..', 'spec_helper.rb')

describe Books, "index action" do
  before(:each) do
    dispatch_to(Books, :index)
  end
end

describe Books, "show action" do
  it "should find the first book that matches the slug, and display the book" do
    book = mock(:book)
    Book.should_receive(:first).with(:slug => "pragprog").and_return book

    dispatch_to(Books, :show, :slug => "pragprog") do |controller|
      controller.should_receive(:display).with(book)
    end
  end

  it "should raise a NotFound exception if the slug parameter does not match a book" do
    Book.should_receive(:first).and_return nil

    lambda {
      dispatch_to(Books, :show, :slug => "pragprog")

    }.should raise_error(Merb::ControllerExceptions::NotFound, :book_slug => "pragprog")
  end
end
</code>
</pre>

h4. Controller Spec Tips

* when using <b>dispatch_to</b>, be sure to mock out the call to <b>display</b>/<b>render</b>.
* avoid specifying the HTTP request method.  e.g. GET, POST, etc.
* use <b>lambda {...}.should raise_error(...)</b> to test client errors.

h3. Running the Controller Specs

<pre>
<code class="sh">
  community_shelf $ rake spec:controller
  (in /Users/ben/code/merb+datamapper/community_shelf)
  ..

  Finished in 0.089664 seconds

  2 examples, 0 failures
</code>
</pre>

h2. View Specs

h3. books/show.html View

h4. app/views/books/show.html.haml

<pre>
<code class="ruby">
.span-18.postpend-6.last
  %h2
    =@book.title
  .span-10.prepend-2.postpend-6.last
    %h3.author
      %span.alt By
      =@book.author
  .span-6
    %h4
      %span.alt Owner
  .span-6
    %h4
      %span.alt ISBN
  .span-6.last
    %h4
      %span.alt Publisher
  .span-6
    %h4
      =@book.owner.name
  .span-6
    %h4
      =@book.isbn
  .span-6.last
    %h4
      =@book.publisher
  .span-18.last
    %h3.alt Notes
  .span-12.prepend-3.postpend-3
    =@book.notes
</code>
</pre>

h3. books/show.html Spec

h4. spec/views/books/show_html_spec.rb

<pre>
<code>
require File.join(File.dirname(__FILE__), '..', '..', 'spec_helper.rb')

describe "books/show.html" do
  before(:each) do
    DataMapper.auto_migrate!
    @book = Book.gen(:owner => User.gen)

    @response = dispatch_to(Books, :show, :slug => @book.slug)
  end

  it "should display the title inside an h2" do
    @response.body.should have_tag(:h2) {|h2| h2.should contain(@book.title)}
  end

  it "should display the author inside an author h3" do
    @response.body.should have_tag(:h3, :class => :author) {|h3| h3.should contain(@book.author)}
  end

  it "should display the ISBN within an h4 inside a div of span 6" do
    @response.body.should have_selector("div.span-6 h4") {|h4| h4.should contain(@book.isbn)}
  end
end
</code>
</pre>

h4. View Spec Tips

* view specs are about testing the <b>correctness</b> of the <b>DOM</b>, _not_ the look & feel.
* <b>have_tag</b>/<b>have_selector</b> takes an <b>intersection</b> on the block, _not_ a <b>union</b>.

h2. Generating Fixtures

h3. Example Fixtures

h4. spec/fixtures.rb

<pre>
<code class="ruby">
isbns =  %w[9780874176292 ... 9780425157299]

Book.fix {{
  :isbn         => isbns.pick,
  :created_at   => (1..100).pick.days.ago,
  :short_title  => (short = /[:sentence:]{3,5}/.gen[0...50]),
  :long_title   => /#{short} (\w+){1,3}/.gen,
  :author       => "#{/\w+/.gen.capitalize} #{/\w+/.gen.capitalize}",
  :publisher    => "#{/\w+/.gen.capitalize} #{/\w+/.gen.capitalize}",
  :notes        => /[:paragraph:]?/.gen,
  :owner => User.pick
}}

User.fixture {{
  :username => username = /\w+/.gen.downcase,
  :identity => "http://#{username}.example.com",
  :email    => "#{username}@example.com",
  :name     => "#{/\w+/.gen.capitalize} #{/\w+/.gen.capitalize}"
}}
</code>
</pre>

h3. Fixture CheetSheet

* double curly braces({{) are used to pass a hash in a block (Proc).
* Resource.<b>fixture(label = :default)</b> -- defines a fixture for a resource.  Accepts a context label.  Abbreviated as <b>fix</b>.
* Resource.<b>generate(label = :default, attributes = {})</b> -- _create_'s an instance of a fixture.  Attributes can be overwritten with the attributes hash.  Abbreviated as <b>gen</b>.
* Resource.<b>make(label = :default, attributes = {})</b> -- _new_'s an instance of a fixture.  Attributes can be overwritten with the attributes hash.
* Resource.<b>pick(label = :default)</b> -- Randomly selects an instance for a fixture.
