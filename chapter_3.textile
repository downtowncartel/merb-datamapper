h1. Chapter 3 - Up & Running

h2. merb-gen

<pre>
<code class="sh">
  merb+datamapper $ merb-gen
  Usage: merb-gen generator_name [options] [args]

  Generate components for your application or entirely new applications.

  Available Generators
      layout                           Generates a layout
      helper                           Generates a new helper.
      freezer                          Generates Merb freezer scripts.
      session_migration                Generates a new session migration.
      part                             This is a part controller generator
      resource                         Generates a new resource.
      app                              Generates a merb application.
      slice                            Generates a merb slice.
      plugin                           Merb plugin generator: lets you kick start your Merb plugin.
      controller                       Generates a new controller.
      resource_controller              Generates a new resource controller.
      model                            Generates a new model. You can specify an ORM different from what the rest
      migration                        This is a migration generator
</code>
</pre>

h3. Generating an App

<pre>
<code class="sh">
  merb+datamapper $ merb-gen app community_shelf
  Generating with app generator:
       [ADDED]  community_shelf/app/controllers/application.rb
       [ADDED]  community_shelf/app/controllers/exceptions.rb
       ...
       [ADDED]  community_shelf/spec/spec.opts
       [ADDED]  community_shelf/app/views/layout/application.html.erb
</code>
</pre>

h4. Default Layout

<pre>
<code class="sh">
  merb+datamapper $ ls community_shelf/
  Rakefile	app		autotest	config		public		spec		test
</code>
</pre>

<pre>
<code class="sh">
  merb+datamapper $ ls community_shelf/config/
  environments	init.rb		rack.rb		router.rb
</code>
</pre>

<pre>
<code class="sh">
  merb+datamapper $ ls community_shelf/config/environments/
  development.rb	production.rb	rake.rb		test.rb
</code>
</pre>

h3. Configuring init.rb

<table>
  <tr>
    <th><h4>Generated init.rb</h4></th>
    <th><h4>Simplified init.rb</h4></th>
  </tr>
  <tr>
    <td>
      <pre><code class="ruby">
#
# ==== Structure of Merb initializer
#
# 1. Load paths.
# 2. Dependencies configuration.
# 3. Libraries (ORM, testing tool, etc) you use.
# 4. Application-specific configuration.
      </code></pre>
    </td>
    <td>
    </td>
  </tr>
  <tr>
    <td>
      <pre><code class="ruby">
#
# ==== Set up load paths
#

# Add the app's "gems" directory to the gem load path.
# Note that the gems directory must mirror the structure RubyGems uses for
# directories under which gems are kept.
#
# To conveniently set it up, use gem install -i <merb_app_root/gems>
# when installing gems. This will set up the structure under /gems
# automagically.
#
# An example:
#
# You want to bundle ActiveRecord and ActiveSupport with your Merb
# application to be deployment environment independent. To do so,
# install gems into merb_app_root/gems directory like this:
#
# gem install -i merb_app_root/gems activesupport-post-2.0.2.gem activerecord-post-2.0.2.gem
#
# Since RubyGems will search merb_app_root/gems for dependencies, order
# in the statement above is important: we need to install ActiveSupport which
# ActiveRecord depends on first.
#
# Remember that bundling of dependencies as gems with your application
# makes it independent of the environment it runs in and is a very
# good, encouraged practice to follow.
Gem.clear_paths
Gem.path.unshift(Merb.root / "gems")

# If you want modules and classes from libraries organized like
# merbapp/lib/magicwand/lib/magicwand.rb to autoload,
# uncomment this.
# Merb.push_path(:lib, Merb.root / "lib") # uses **/*.rb as path glob.


      </code></pre>
    </td>
    <td>
      <pre><code class="ruby">
#
# ==== Structure of Merb initializer
#
# 1. Load paths.

Gem.clear_paths
Gem.path.unshift(Merb.root / "gems")

Merb.push_path(:lib, Merb.root / :lib)
      </code></pre>
    </td>
  </tr>
  <tr>
    <td>
      <pre><code class="ruby">
# ==== Dependencies

# These are some examples of how you might specify dependencies.
# Dependency loading is delayed to a later Merb app
# boot stage, but it may be important when
# another part of your configuration relies on libraries specified
# here.
#
# dependencies "RedCloth", "merb_helpers"
# OR
# dependency "RedCloth", "> 3.0"
# OR
# dependencies "RedCloth" => "> 3.0", "ruby-aes-cext" => "= 1.0"
Merb::BootLoader.after_app_loads do
  # Add dependencies here that must load after the application loads:

  # dependency "magic_admin" # this gem uses the app's model classes
end


      </code></pre>
    </td>
    <td>
      <pre><code class="ruby">
# 2. Dependencies configuration.

require 'isbn/tools'
require 'openid'
require 'dm-validations'
require 'merb-action-args'
require 'merb-assets'
      </code></pre>
    </td>
  </tr>
  <tr>
    <td>
      <pre><code class="ruby">
#
# ==== Set up your ORM of choice
#

# Merb doesn't come with database support by default.  You need
# an ORM plugin.  Install one, and uncomment one of the following lines,
# if you need a database.

# Uncomment for DataMapper ORM
# use_orm :datamapper

# Uncomment for ActiveRecord ORM
# use_orm :activerecord

# Uncomment for Sequel ORM
# use_orm :sequel


#
# ==== Pick what you test with
#

# This defines which test framework the generators will use.
# RSpec is turned on by default.
#
# To use Test::Unit, you need to install the merb_test_unit gem.
# To use RSpec, you don't have to install any additional gems, since
# merb-core provides support for RSpec.
#
# use_test :test_unit
use_test :rspec

#
# ==== Choose which template engine to use by default
#

# Merb can generate views for different template engines, choose your favourite as the default.

use_template_engine :erb
# use_template_engine :haml

      </code></pre>
    </td>
    <td>
      <pre><code class="ruby">
# 3. Libraries (ORM, testing tool, etc) you use.

use_orm :datamapper

use_test :rspec, 'dm-sweatshop'

use_template_engine :haml

      </code></pre>
    </td>
  </tr>
  <tr>
    <td>
      <pre><code class="ruby">
#
# ==== Set up your basic configuration
#

# IMPORTANT:
#
# early on Merb boot init file is not yet loaded.
# Thus setting PORT, PID FILE and ADAPTER using init file does not
# make sense and only can lead to confusion because default settings
# will be used instead.
#
# Please use command line options for them.
# See http://wiki.merbivore.com/pages/merb-core-boot-process
# if you want to know more.
Merb::Config.use do |c|

  # Sets up a custom session id key which is used for the session persistence
  # cookie name.  If not specified, defaults to '_session_id'.
  # c[:session_id_key] = '_session_id'

  # The session_secret_key is only required for the cookie session store.
  c[:session_secret_key]  = '8c19c159273833704fb920bc0068a4d3da1851de'

  # There are various options here, by default Merb comes with 'cookie', 
  # 'memory' or 'memcached'.  You can of course use your favorite ORM 
  # instead: 'datamapper', 'sequel' or 'activerecord'.
  c[:session_store] = 'cookie'
end

      </code></pre>
    </td>
    <td>
      <pre><code class="ruby">
# 4. Application-specific configuration.

Merb::Config.use do |c|
  c[:session_id_key] = 'community_shelf_session_id'
  c[:session_secret_key]  = '8c19c159273833704fb920bc0068a4d3da1851de'
  c[:session_store] = 'cookie'
end

      </code></pre>
    </td>
  </tr>
  <tr>
    <td>
      <pre><code class="ruby">
# ==== Tune your inflector

# To fine tune your inflector use the word, singular_word and plural_word
# methods of Language::English::Inflector module metaclass.
#
# Here we define erratum/errata exception case:
#
# Language::English::Inflector.word "erratum", "errata"
#
# In case singular and plural forms are the same omit
# second argument on call:
#
# Language::English::Inflector.word 'information'
#
# You can also define general, singularization and pluralization
# rules:
#
# Once the following rule is defined:
# Language::English::Inflector.rule 'y', 'ies'
#
# You can see the following results:
# irb> "fly".plural
# => flies
# irb> "cry".plural
# => cries
#
# Example for singularization rule:
#
# Language::English::Inflector.singular_rule 'o', 'oes'
#
# Works like this:
# irb> "heroes".singular
# => hero
#
# Example of pluralization rule:
# Language::English::Inflector.singular_rule 'fe', 'ves'
#
# And the result is:
# irb> "wife".plural
# => wives
      </code></pre>
    </td>
    <td>
      <pre><code class="ruby">
# ==== Tune your inflector

# ==== Callback/Bootloader classes
      </code></pre>
    </td>
  </tr>
</table>

h3. copy in simplified_init.rb

<pre>
<code class="sh">
  merb+datamapper $ cp simplified_init.rb community_shelf/config/init.rb
</code>
</pre>

h2. Configuring the Development Environment

h4. config/environments/development.rb

<pre>
<code class="ruby">
Merb.logger.info("Loaded DEVELOPMENT Environment...")
Merb::Config.use { |c|
  c[:exception_details] = true
  c[:reload_classes] = true
  c[:reload_time] = 0.5
  c[:log_auto_flush ] = true
  c[:log_level] = :debug

  c[:isbndb_key] = "6S2BUFOE"
}

DataMapper.setup(:default, "sqlite3://community_shelf.db")
DataObjects::Sqlite3.logger = DataObjects::Logger.new(Merb.log_file, 0)
</code>
</pre>

h2. Generating a Model

<pre>
<code class="sh">
  merb+datamapper $ cd community_shelf
  community_shelf $ merb-gen model Book
   ~ Compiling routes...
  Generating with model generator:
       [ADDED]  spec/models/book_spec.rb
       [ADDED]  app/models/book.rb
   ~ Using 'share-nothing' cookie sessions (4kb limit per client)
</code>
</pre>

h2. Adding a Property

h4. app/models/book.rb

<pre>
<code class="ruby">
class Book
  include DataMapper::Resource

  property :id,   Serial
end
</code>
</pre>

h2. Starting merb

<pre>
<code class="sh">
  community_shelf $ merb -i
   ~ Loaded DEVELOPMENT Environment...
   ~ No database.yml file found in /Users/ben/code/merb+datamapper/community_shelf/config, assuming database connection(s) established in the environment file in /Users/ben/code/merb+datamapper/community_shelf/config/environments
   ~ loading gem 'merb_datamapper' ...
   ~ loading gem 'merb-haml' ...
   ~ Compiling routes...
   ~ Using 'share-nothing' cookie sessions (4kb limit per client)
  >> DataMapper.auto_migrate!
  Sun, 31 Aug 2008 16:43:14 GMT ~ debug ~ DROP TABLE IF EXISTS "books"
  Sun, 31 Aug 2008 16:43:14 GMT ~ debug ~ PRAGMA table_info('books')
  Sun, 31 Aug 2008 16:43:14 GMT ~ debug ~ SELECT sqlite_version(*)
  Sun, 31 Aug 2008 16:43:14 GMT ~ debug ~ CREATE TABLE "books" ("id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT)
  => [Book]
</code>
</pre>